object CheckCommand "haproxy" {
    import "plugin-check-command"
    command = [ PluginDir + "/check_haproxy" ]

    arguments = {
        "--defaults" = {
            value = "$haproxy_default$"
            description = "Set/Override the defaults which will be applied to all checks (unless specifically set by --overrides)."
        }
        "--frontends" = {
            set_if = "$haproxy_frontends$"
            description = "Enable checks for the frontends in HAProxy (that they're marked as OPEN and the session limits haven't been reached)."
        }
        "--nofrontends" = {
            set_if = "$haproxy_nofrontends$"
            description = "Disable checks for the frontends in HAProxy (that they're marked as OPEN and the session limits haven't been reached)."
        }
        "--backends" = {
            set_if = "$haproxy_backends$"
            description = "Enable checks for the backends in HAProxy (that they have the required quorum of servers, and that the session limits haven't been reached)."
        }
        "--nobackends" = {
            set_if = "$haproxy_nobackends$"
            description = "Disable checks for the backends in HAProxy (that they have the required quorum of servers, and that the session limits haven't been reached)."
        }
        "--servers" = {
            set_if = "$haproxy_servers$"
            description = "Enable checks for the servers in HAProxy (that they haven't reached the limits for the sessions or for queues)."
        }
        "--noservers" = {
            set_if = "$haproxy_noservers$"
            description = "Disable checks for the servers in HAProxy (that they haven't reached the limits for the sessions or for queues)."
        }
        "--overrides" = {
            value = {{
                return macro("$haproxy_overrides$").split(" ")
            }}
            description = "Override the defaults for a particular frontend or backend, in the form {name}:{override}, where {override} is the same format as --defaults above."
        }
        "--socket" = {
            value = "$haproxy_socket$"
            description = "Path to the socket check_haproxy should connect to"
            required = true
        }
    }
}

